{"version":3,"sources":["serviceWorker.js","Posts.js","Home.js","Blog.js","index.js"],"names":["Boolean","window","location","hostname","match","Posts","path","file-name","title","date","summary","content","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderBlog","bind","assertThisInitialized","_this2","react_default","a","createElement","className","onClick","history","push","id","_this3","map","post","React","Component","withRouter","Blog","state","markdown","class","align","react_markdown_default","source","escapeHtml","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","src_Blog_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCjBSC,EADD,CAAC,CAACC,KAAQ,8BAA+BC,YAAa,gCAAiCC,MAAS,sDAAuDC,KAAQ,qBAAsBC,QAAW,gQAAiQC,QAAW,+9GCKpdC,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFHA,0EAKRR,EAAME,EAAOC,EAAMC,GAAS,IAAAc,EAAAP,KACnC,OAAOQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAME,QACF,kBAAML,EAAKX,MAAMiB,QAAQC,KAAK,SAAWzB,KACxCE,GACLiB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBI,GAAG,cAAcvB,IACxDgB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAIjB,qCAIH,IAAAuB,EAAAhB,KACL,OAAOQ,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,iEAMJtB,EAAM6B,IACF,SAAAC,GAAI,OACAF,EAAKZ,WAAWc,EAAK7B,KAAM6B,EAAK3B,MAAO2B,EAAK1B,KAAM0B,EAAKzB,mBAhC5D0B,IAAMC,WAuCVC,cAAW1B,uDClBX2B,sBArBX,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACfzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KACD2B,MAAQ,CACTC,SAAU5B,EAAMF,QAChBH,MAAOK,EAAML,MACbC,KAAMI,EAAMJ,MALDK,wEAUf,OAAOW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,MAAIe,MAAM,OAAOV,GAAG,aAAaf,KAAKuB,MAAMhC,OAC5CiB,EAAAC,EAAAC,cAAA,KAAGgB,MAAM,SAAT,aAA4B1B,KAAKuB,MAAM/B,MACvCgB,EAAAC,EAAAC,cAAA,OAAKe,MAAM,mCAAmCV,GAAG,aAC7CP,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAUmB,OAAQ5B,KAAKuB,MAAMC,SACnBK,YAAY,aAhBnBV,IAAMC,YCMzBU,IAASC,OACLvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACIzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAO7C,KAAK,SAAS8C,OAAK,EAACC,UAAWzC,IAElCP,EAAM6B,IAAI,SAAAC,GAAI,OACVV,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAO7C,KAAM,SAAW6B,EAAK7B,KAAM8C,OAAK,EACjCC,UAAW,kBAAM5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAM9C,MAAO2B,EAAK3B,MAAOC,KAAM0B,EAAK1B,KAAME,QAASwB,EAAKxB,iBAI9E4C,SAASC,eAAe,SJ4GxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b2e76c9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Posts = [{\"path\": \"/landscape-image-clustering\", \"file-name\": \"Landscape-Image-Clustering.md\", \"title\": \"Landscape Image Clustering based on Color Histogram\", \"date\": \"September 16, 2018\", \"summary\": \"My original thought about this project is to cluster the landscape images by their colors. I developed a web crawler to download 8892 landscape photos from mob.org. \\nHowever, I ran up against difficulty in extracting the color features from the images.\", \"content\": \"My original thought about this project is to cluster the landscape images by their colors. I developed a web crawler to download 8892 landscape photos from <a href=\\\"https://wallpaper.mob.org/gallery/tag=landscape/\\\">mob.org</a>.\\n\\nHowever, I ran up against difficulty in extracting the color features from the images. I was inspired by an assignment given by Professor Harvey. In the assignment, the material guides us to use the proportional of the channel to classify whether a certain picture depicts summer or winter. From this perspective, I searched some information online and was attracted by the concept of color histogram.\\n\\nTherefore, I designed my procedure as followings. Interestingly, I found a paper that has a similar approach to mine.<sup>[1]<sup>\\n\\nThe first step is quite obvious, to read the image as a three-dimensional matrix. The first and second dimensions are the count of rows and columns, and the third dimension is the color vector representing RGB, whose length is three. So it is basically an (N, M, 3) matrix.\\n\\nLet\\u2019s take this picture as an example.\\n\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/sample.jpg\\\" alt = \\\"Sample\\\">\\n\\nIn this picture, the blue, yellow, green and red color seems to be dominant. If we plot the pixels in three-dimensional space, the distribution will look like this.\\n\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/sample_color_scatter.png\\\" alt = \\\"Sample Color Scatter\\\">\\n\\nSecondly, I count the frequency of the occurrence of primary colors and use it as the features of the images. Sometimes it is better to view the image in other color spaces, like HSV or HSL, which is more friendly to human\\u2019s eyes. In this project, I still choose the RGB color space for simplicity.\\n\\nSince there are 256 possible values for a one color dimension, I transformed the value by dividing them with 26 so there will be 10 possible values for each color dimension, which will lessen the burden of calculation.\\n\\nThe third step is to apply the K-means algorithm to cluster the images. Here I write a scala script and run it on the spark, which will make four clusters. The color histogram of the cluster centers is shown in the figure.\\n\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/cluster_centers_hist.png\\\" alt = \\\"Cluster Centers Color Histogram\\\">\\n\\nThe centers look separated from each other, which is indicating a good result to me. Hopefully, the different clusters can be distinguished by human eyes. I collected 400 images of each cluster and display them in the followings.\\n\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/400images_0.png\\\" alt = \\\"400images_0\\\">\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/400images_1.png\\\" alt = \\\"400images_1\\\">\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/400images_2.png\\\" alt = \\\"400images_2\\\">\\n<img src = \\\"./figures/Landscape-Image-Clustering-Based-On-Color-Histogram/400images_3.png\\\" alt = \\\"400images_3\\\">\\n\\nThey look great, aren\\u2019t they? Each cluster appears to have a different color theme.\\n\\nReference:\\n\\n1. Amro, Anas Nassar, Ibrahim Tamimi, Hashem. (2013). Clustering of Digital Images based on Color Histogram.</li>\\n2. Sharon Lin and Pat Hanrahan. 2013. Modeling how people extract color themes from images. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI \\u201813). ACM, New York, NY, USA, 3101-3110.\\n\"}]\nexport default Posts;","import React from 'react'\nimport Posts from './Posts.js'\nimport './Home.css'\nimport {withRouter} from \"react-router-dom\";\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.renderBlog = this.renderBlog.bind(this)\n    }\n\n    renderBlog(path, title, date, summary) {\n        return <div className=\"container\">\n            <h5>\n                <span onClick={\n                    () => this.props.history.push(\"/blog/\" + path)}>\n                    {title}</span>\n                <span className=\"badge badge-info\" id=\"date-badge\">{date}</span></h5>\n            <hr/>\n            <p>{summary}</p>\n        </div>\n    }\n\n    render() {\n        return <div>\n            <div className=\"jumbotron\">\n                <div className=\"container\">\n                    <h3>何燕杰的博客 (Yanjie He's Blog)</h3>\n                    <p>\n                        Good things come to those who keep moving forward.\n                    </p>\n                </div>\n            </div>\n            {\n                Posts.map(\n                    post =>\n                        this.renderBlog(post.path, post.title, post.date, post.summary)\n                )\n            }\n        </div>\n    }\n}\n\nexport default withRouter(Home)","import React from 'react'\nimport Markdown from 'react-markdown'\nimport './Blog.css'\n\nclass Blog extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            markdown: props.content,\n            title: props.title,\n            date: props.date\n        }\n    }\n\n    render() {\n        return <div className=\"container\">\n            <h3 class=\"mt-4\" id=\"blog-text\">{this.state.title}</h3>\n            <p align=\"right\">Posted on {this.state.date}</p>\n            <div class=\"shadow p-3 mb-5 bg-white rounded\" id=\"blog-text\">\n                <Markdown source={this.state.markdown}\n                          escapeHtml={false}/>\n            </div>\n        </div>\n    }\n}\n\nexport default Blog","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home.js'\nimport './bootstrap.css'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Blog from './Blog.js'\nimport Posts from './Posts.js'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/blog/\" exact component={Home}/>\n            {\n                Posts.map(post =>\n                    <Route path={\"/blog/\" + post.path} exact\n                           component={() => <Blog title={post.title} date={post.date} content={post.content}/>}/>\n                )\n            }\n        </Switch>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}